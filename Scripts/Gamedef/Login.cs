// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Login.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Gamedef {

  /// <summary>Holder for reflection information generated from Login.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class LoginReflection {

    #region Descriptor
    /// <summary>File descriptor for Login.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LoginReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtMb2dpbi5wcm90bxIHZ2FtZWRlZiI7ChJSZWdpc3RlckFjY291bnRSZXES",
            "EwoLQWNjb3VudE5hbWUYASABKAkSEAoIUGFzc3dvcmQYAiABKAkiNAoSUmVn",
            "aXN0ZXJBY2NvdW50QWNrEg4KBlJlc3VsdBgBIAEoCRIOCgZSb2xlSUQYAiAB",
            "KA0iMQoITG9naW5SRVESEwoLQWNjb3VudE5hbWUYASABKAkSEAoIUGFzc3dv",
            "cmQYAiABKAkiUgoITG9naW5BQ0sSDgoGUmVzdWx0GAEgASgJEg4KBlJvbGVJ",
            "RBgCIAEoDRISCgpHb2xkTnVtYmVyGAMgASgNEhIKClVuTG9ja0xpc3QYBCAB",
            "KA0iIwoNVXBkYXRlR29sZFJlcRISCgpHb2xkTnVtYmVyGAEgASgNIjMKDVVw",
            "ZGF0ZUdvbGRBY2sSDgoGUmVzdWx0GAEgASgJEhIKCkdvbGROdW1iZXIYAiAB",
            "KA0iIAoOQnV5U2hvcEl0ZW1SZXESDgoGSXRlbUlEGAEgASgNIkgKDkJ1eVNo",
            "b3BJdGVtQWNrEg4KBlJlc3VsdBgBIAEoCRISCgpHb2xkTnVtYmVyGAIgASgN",
            "EhIKClVuTG9ja0xpc3QYAyABKA0iPQoRVXBkYXRlUG9zaXRpb25SZXESDAoE",
            "UG9zWBgBIAEoAhIMCgRQb3N5GAIgASgCEgwKBFBvc3oYAyABKAIiTAoQQnJv",
            "YWRDYXN0UG9zdGlvbhIOCgZSb2xlSUQYASABKA0SDAoEUG9zWBgCIAEoAhIM",
            "CgRQb3N5GAMgASgCEgwKBFBvc3oYBCABKAIiPAoVQnJvYWRDYXN0UGxheWVy",
            "T25MaW5lEg4KBlJvbGVJRBgBIAEoDRITCgtBY2NvdW50TmFtZRgCIAEoCSIo",
            "ChZCcm9hZENhc3RQbGF5ZXJPZmZMaW5lEg4KBlJvbGVJRBgBIAEoDSINCgtU",
            "ZXN0UGluZ1JlcSINCgtUZXN0UGluZ0FjayIeCgtTZW5kQ2hhdFJlcRIPCgdD",
            "b250ZW50GAEgASgJIjMKEkJyb2FkQ2FzdFdvcmxkQ2hhdBIMCgROYW1lGAEg",
            "ASgJEg8KB0NvbnRlbnQYAiABKAkiDgoMSGVhcnRCZWF0UkVRIg4KDEhlYXJ0",
            "QmVhdEFDSyIoCgtUZXN0UGFja2FnZRIZCg1jaGFuZ2VDbG90aGVzGAEgAygF",
            "QgIQACIPCg1QZWVyQ29ubmVjdGVkIhIKEFBlZXJEaXNjb25uZWN0ZWQiEgoQ",
            "UGVlckNvbm5lY3RFcnJvciIPCg1QZWVyU2VuZEVycm9yIg8KDVBlZXJSZWN2",
            "RXJyb3JiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamedef.RegisterAccountReq), global::Gamedef.RegisterAccountReq.Parser, new[]{ "AccountName", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamedef.RegisterAccountAck), global::Gamedef.RegisterAccountAck.Parser, new[]{ "Result", "RoleID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamedef.LoginREQ), global::Gamedef.LoginREQ.Parser, new[]{ "AccountName", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamedef.LoginACK), global::Gamedef.LoginACK.Parser, new[]{ "Result", "RoleID", "GoldNumber", "UnLockList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamedef.UpdateGoldReq), global::Gamedef.UpdateGoldReq.Parser, new[]{ "GoldNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamedef.UpdateGoldAck), global::Gamedef.UpdateGoldAck.Parser, new[]{ "Result", "GoldNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamedef.BuyShopItemReq), global::Gamedef.BuyShopItemReq.Parser, new[]{ "ItemID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamedef.BuyShopItemAck), global::Gamedef.BuyShopItemAck.Parser, new[]{ "Result", "GoldNumber", "UnLockList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamedef.UpdatePositionReq), global::Gamedef.UpdatePositionReq.Parser, new[]{ "PosX", "Posy", "Posz" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamedef.BroadCastPostion), global::Gamedef.BroadCastPostion.Parser, new[]{ "RoleID", "PosX", "Posy", "Posz" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamedef.BroadCastPlayerOnLine), global::Gamedef.BroadCastPlayerOnLine.Parser, new[]{ "RoleID", "AccountName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamedef.BroadCastPlayerOffLine), global::Gamedef.BroadCastPlayerOffLine.Parser, new[]{ "RoleID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamedef.TestPingReq), global::Gamedef.TestPingReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamedef.TestPingAck), global::Gamedef.TestPingAck.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamedef.SendChatReq), global::Gamedef.SendChatReq.Parser, new[]{ "Content" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamedef.BroadCastWorldChat), global::Gamedef.BroadCastWorldChat.Parser, new[]{ "Name", "Content" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamedef.HeartBeatREQ), global::Gamedef.HeartBeatREQ.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamedef.HeartBeatACK), global::Gamedef.HeartBeatACK.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamedef.TestPackage), global::Gamedef.TestPackage.Parser, new[]{ "ChangeClothes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamedef.PeerConnected), global::Gamedef.PeerConnected.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamedef.PeerDisconnected), global::Gamedef.PeerDisconnected.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamedef.PeerConnectError), global::Gamedef.PeerConnectError.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamedef.PeerSendError), global::Gamedef.PeerSendError.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamedef.PeerRecvError), global::Gamedef.PeerRecvError.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// client -> login 200
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RegisterAccountReq : pb::IMessage<RegisterAccountReq> {
    private static readonly pb::MessageParser<RegisterAccountReq> _parser = new pb::MessageParser<RegisterAccountReq>(() => new RegisterAccountReq());
    public static pb::MessageParser<RegisterAccountReq> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamedef.LoginReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public RegisterAccountReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    public RegisterAccountReq(RegisterAccountReq other) : this() {
      accountName_ = other.accountName_;
      password_ = other.password_;
    }

    public RegisterAccountReq Clone() {
      return new RegisterAccountReq(this);
    }

    /// <summary>Field number for the "AccountName" field.</summary>
    public const int AccountNameFieldNumber = 1;
    private string accountName_ = "";
    public string AccountName {
      get { return accountName_; }
      set {
        accountName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as RegisterAccountReq);
    }

    public bool Equals(RegisterAccountReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountName != other.AccountName) return false;
      if (Password != other.Password) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (AccountName.Length != 0) hash ^= AccountName.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountName);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (AccountName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountName);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    public void MergeFrom(RegisterAccountReq other) {
      if (other == null) {
        return;
      }
      if (other.AccountName.Length != 0) {
        AccountName = other.AccountName;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountName = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// login -> client 201
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RegisterAccountAck : pb::IMessage<RegisterAccountAck> {
    private static readonly pb::MessageParser<RegisterAccountAck> _parser = new pb::MessageParser<RegisterAccountAck>(() => new RegisterAccountAck());
    public static pb::MessageParser<RegisterAccountAck> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamedef.LoginReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public RegisterAccountAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    public RegisterAccountAck(RegisterAccountAck other) : this() {
      result_ = other.result_;
      roleID_ = other.roleID_;
    }

    public RegisterAccountAck Clone() {
      return new RegisterAccountAck(this);
    }

    /// <summary>Field number for the "Result" field.</summary>
    public const int ResultFieldNumber = 1;
    private string result_ = "";
    public string Result {
      get { return result_; }
      set {
        result_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RoleID" field.</summary>
    public const int RoleIDFieldNumber = 2;
    private uint roleID_;
    public uint RoleID {
      get { return roleID_; }
      set {
        roleID_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as RegisterAccountAck);
    }

    public bool Equals(RegisterAccountAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (RoleID != other.RoleID) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Result.Length != 0) hash ^= Result.GetHashCode();
      if (RoleID != 0) hash ^= RoleID.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Result.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Result);
      }
      if (RoleID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RoleID);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Result.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Result);
      }
      if (RoleID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoleID);
      }
      return size;
    }

    public void MergeFrom(RegisterAccountAck other) {
      if (other == null) {
        return;
      }
      if (other.Result.Length != 0) {
        Result = other.Result;
      }
      if (other.RoleID != 0) {
        RoleID = other.RoleID;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Result = input.ReadString();
            break;
          }
          case 16: {
            RoleID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  client -> login 202
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LoginREQ : pb::IMessage<LoginREQ> {
    private static readonly pb::MessageParser<LoginREQ> _parser = new pb::MessageParser<LoginREQ>(() => new LoginREQ());
    public static pb::MessageParser<LoginREQ> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamedef.LoginReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public LoginREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    public LoginREQ(LoginREQ other) : this() {
      accountName_ = other.accountName_;
      password_ = other.password_;
    }

    public LoginREQ Clone() {
      return new LoginREQ(this);
    }

    /// <summary>Field number for the "AccountName" field.</summary>
    public const int AccountNameFieldNumber = 1;
    private string accountName_ = "";
    public string AccountName {
      get { return accountName_; }
      set {
        accountName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    /// <summary>
    /// 32位MD5,用户输入最长31位。
    /// </summary>
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as LoginREQ);
    }

    public bool Equals(LoginREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountName != other.AccountName) return false;
      if (Password != other.Password) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (AccountName.Length != 0) hash ^= AccountName.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountName);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (AccountName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountName);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    public void MergeFrom(LoginREQ other) {
      if (other == null) {
        return;
      }
      if (other.AccountName.Length != 0) {
        AccountName = other.AccountName;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountName = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  login -> client 203
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LoginACK : pb::IMessage<LoginACK> {
    private static readonly pb::MessageParser<LoginACK> _parser = new pb::MessageParser<LoginACK>(() => new LoginACK());
    public static pb::MessageParser<LoginACK> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamedef.LoginReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public LoginACK() {
      OnConstruction();
    }

    partial void OnConstruction();

    public LoginACK(LoginACK other) : this() {
      result_ = other.result_;
      roleID_ = other.roleID_;
      goldNumber_ = other.goldNumber_;
      unLockList_ = other.unLockList_;
    }

    public LoginACK Clone() {
      return new LoginACK(this);
    }

    /// <summary>Field number for the "Result" field.</summary>
    public const int ResultFieldNumber = 1;
    private string result_ = "";
    /// <summary>
    ///  空表示正常登陆
    /// </summary>
    public string Result {
      get { return result_; }
      set {
        result_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RoleID" field.</summary>
    public const int RoleIDFieldNumber = 2;
    private uint roleID_;
    public uint RoleID {
      get { return roleID_; }
      set {
        roleID_ = value;
      }
    }

    /// <summary>Field number for the "GoldNumber" field.</summary>
    public const int GoldNumberFieldNumber = 3;
    private uint goldNumber_;
    public uint GoldNumber {
      get { return goldNumber_; }
      set {
        goldNumber_ = value;
      }
    }

    /// <summary>Field number for the "UnLockList" field.</summary>
    public const int UnLockListFieldNumber = 4;
    private uint unLockList_;
    /// <summary>
    /// 前8位用于记录商店1-8的商品解锁情况，0为锁住，1为解锁
    /// </summary>
    public uint UnLockList {
      get { return unLockList_; }
      set {
        unLockList_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as LoginACK);
    }

    public bool Equals(LoginACK other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (RoleID != other.RoleID) return false;
      if (GoldNumber != other.GoldNumber) return false;
      if (UnLockList != other.UnLockList) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Result.Length != 0) hash ^= Result.GetHashCode();
      if (RoleID != 0) hash ^= RoleID.GetHashCode();
      if (GoldNumber != 0) hash ^= GoldNumber.GetHashCode();
      if (UnLockList != 0) hash ^= UnLockList.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Result.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Result);
      }
      if (RoleID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RoleID);
      }
      if (GoldNumber != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(GoldNumber);
      }
      if (UnLockList != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(UnLockList);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Result.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Result);
      }
      if (RoleID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoleID);
      }
      if (GoldNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GoldNumber);
      }
      if (UnLockList != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnLockList);
      }
      return size;
    }

    public void MergeFrom(LoginACK other) {
      if (other == null) {
        return;
      }
      if (other.Result.Length != 0) {
        Result = other.Result;
      }
      if (other.RoleID != 0) {
        RoleID = other.RoleID;
      }
      if (other.GoldNumber != 0) {
        GoldNumber = other.GoldNumber;
      }
      if (other.UnLockList != 0) {
        UnLockList = other.UnLockList;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Result = input.ReadString();
            break;
          }
          case 16: {
            RoleID = input.ReadUInt32();
            break;
          }
          case 24: {
            GoldNumber = input.ReadUInt32();
            break;
          }
          case 32: {
            UnLockList = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UpdateGoldReq : pb::IMessage<UpdateGoldReq> {
    private static readonly pb::MessageParser<UpdateGoldReq> _parser = new pb::MessageParser<UpdateGoldReq>(() => new UpdateGoldReq());
    public static pb::MessageParser<UpdateGoldReq> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamedef.LoginReflection.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public UpdateGoldReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    public UpdateGoldReq(UpdateGoldReq other) : this() {
      goldNumber_ = other.goldNumber_;
    }

    public UpdateGoldReq Clone() {
      return new UpdateGoldReq(this);
    }

    /// <summary>Field number for the "GoldNumber" field.</summary>
    public const int GoldNumberFieldNumber = 1;
    private uint goldNumber_;
    public uint GoldNumber {
      get { return goldNumber_; }
      set {
        goldNumber_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as UpdateGoldReq);
    }

    public bool Equals(UpdateGoldReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GoldNumber != other.GoldNumber) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (GoldNumber != 0) hash ^= GoldNumber.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (GoldNumber != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GoldNumber);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (GoldNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GoldNumber);
      }
      return size;
    }

    public void MergeFrom(UpdateGoldReq other) {
      if (other == null) {
        return;
      }
      if (other.GoldNumber != 0) {
        GoldNumber = other.GoldNumber;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GoldNumber = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UpdateGoldAck : pb::IMessage<UpdateGoldAck> {
    private static readonly pb::MessageParser<UpdateGoldAck> _parser = new pb::MessageParser<UpdateGoldAck>(() => new UpdateGoldAck());
    public static pb::MessageParser<UpdateGoldAck> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamedef.LoginReflection.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public UpdateGoldAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    public UpdateGoldAck(UpdateGoldAck other) : this() {
      result_ = other.result_;
      goldNumber_ = other.goldNumber_;
    }

    public UpdateGoldAck Clone() {
      return new UpdateGoldAck(this);
    }

    /// <summary>Field number for the "Result" field.</summary>
    public const int ResultFieldNumber = 1;
    private string result_ = "";
    public string Result {
      get { return result_; }
      set {
        result_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GoldNumber" field.</summary>
    public const int GoldNumberFieldNumber = 2;
    private uint goldNumber_;
    public uint GoldNumber {
      get { return goldNumber_; }
      set {
        goldNumber_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as UpdateGoldAck);
    }

    public bool Equals(UpdateGoldAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (GoldNumber != other.GoldNumber) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Result.Length != 0) hash ^= Result.GetHashCode();
      if (GoldNumber != 0) hash ^= GoldNumber.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Result.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Result);
      }
      if (GoldNumber != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(GoldNumber);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Result.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Result);
      }
      if (GoldNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GoldNumber);
      }
      return size;
    }

    public void MergeFrom(UpdateGoldAck other) {
      if (other == null) {
        return;
      }
      if (other.Result.Length != 0) {
        Result = other.Result;
      }
      if (other.GoldNumber != 0) {
        GoldNumber = other.GoldNumber;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Result = input.ReadString();
            break;
          }
          case 16: {
            GoldNumber = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BuyShopItemReq : pb::IMessage<BuyShopItemReq> {
    private static readonly pb::MessageParser<BuyShopItemReq> _parser = new pb::MessageParser<BuyShopItemReq>(() => new BuyShopItemReq());
    public static pb::MessageParser<BuyShopItemReq> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamedef.LoginReflection.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public BuyShopItemReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BuyShopItemReq(BuyShopItemReq other) : this() {
      itemID_ = other.itemID_;
    }

    public BuyShopItemReq Clone() {
      return new BuyShopItemReq(this);
    }

    /// <summary>Field number for the "ItemID" field.</summary>
    public const int ItemIDFieldNumber = 1;
    private uint itemID_;
    public uint ItemID {
      get { return itemID_; }
      set {
        itemID_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as BuyShopItemReq);
    }

    public bool Equals(BuyShopItemReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemID != other.ItemID) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ItemID != 0) hash ^= ItemID.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ItemID);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ItemID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemID);
      }
      return size;
    }

    public void MergeFrom(BuyShopItemReq other) {
      if (other == null) {
        return;
      }
      if (other.ItemID != 0) {
        ItemID = other.ItemID;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BuyShopItemAck : pb::IMessage<BuyShopItemAck> {
    private static readonly pb::MessageParser<BuyShopItemAck> _parser = new pb::MessageParser<BuyShopItemAck>(() => new BuyShopItemAck());
    public static pb::MessageParser<BuyShopItemAck> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamedef.LoginReflection.Descriptor.MessageTypes[7]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public BuyShopItemAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BuyShopItemAck(BuyShopItemAck other) : this() {
      result_ = other.result_;
      goldNumber_ = other.goldNumber_;
      unLockList_ = other.unLockList_;
    }

    public BuyShopItemAck Clone() {
      return new BuyShopItemAck(this);
    }

    /// <summary>Field number for the "Result" field.</summary>
    public const int ResultFieldNumber = 1;
    private string result_ = "";
    public string Result {
      get { return result_; }
      set {
        result_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GoldNumber" field.</summary>
    public const int GoldNumberFieldNumber = 2;
    private uint goldNumber_;
    public uint GoldNumber {
      get { return goldNumber_; }
      set {
        goldNumber_ = value;
      }
    }

    /// <summary>Field number for the "UnLockList" field.</summary>
    public const int UnLockListFieldNumber = 3;
    private uint unLockList_;
    /// <summary>
    /// 前8位用于记录商店1-8的商品解锁情况，0为锁住，1为解锁
    /// </summary>
    public uint UnLockList {
      get { return unLockList_; }
      set {
        unLockList_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as BuyShopItemAck);
    }

    public bool Equals(BuyShopItemAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (GoldNumber != other.GoldNumber) return false;
      if (UnLockList != other.UnLockList) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Result.Length != 0) hash ^= Result.GetHashCode();
      if (GoldNumber != 0) hash ^= GoldNumber.GetHashCode();
      if (UnLockList != 0) hash ^= UnLockList.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Result.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Result);
      }
      if (GoldNumber != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(GoldNumber);
      }
      if (UnLockList != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UnLockList);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Result.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Result);
      }
      if (GoldNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GoldNumber);
      }
      if (UnLockList != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnLockList);
      }
      return size;
    }

    public void MergeFrom(BuyShopItemAck other) {
      if (other == null) {
        return;
      }
      if (other.Result.Length != 0) {
        Result = other.Result;
      }
      if (other.GoldNumber != 0) {
        GoldNumber = other.GoldNumber;
      }
      if (other.UnLockList != 0) {
        UnLockList = other.UnLockList;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Result = input.ReadString();
            break;
          }
          case 16: {
            GoldNumber = input.ReadUInt32();
            break;
          }
          case 24: {
            UnLockList = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// client -> Login 208
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UpdatePositionReq : pb::IMessage<UpdatePositionReq> {
    private static readonly pb::MessageParser<UpdatePositionReq> _parser = new pb::MessageParser<UpdatePositionReq>(() => new UpdatePositionReq());
    public static pb::MessageParser<UpdatePositionReq> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamedef.LoginReflection.Descriptor.MessageTypes[8]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public UpdatePositionReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    public UpdatePositionReq(UpdatePositionReq other) : this() {
      posX_ = other.posX_;
      posy_ = other.posy_;
      posz_ = other.posz_;
    }

    public UpdatePositionReq Clone() {
      return new UpdatePositionReq(this);
    }

    /// <summary>Field number for the "PosX" field.</summary>
    public const int PosXFieldNumber = 1;
    private float posX_;
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "Posy" field.</summary>
    public const int PosyFieldNumber = 2;
    private float posy_;
    public float Posy {
      get { return posy_; }
      set {
        posy_ = value;
      }
    }

    /// <summary>Field number for the "Posz" field.</summary>
    public const int PoszFieldNumber = 3;
    private float posz_;
    public float Posz {
      get { return posz_; }
      set {
        posz_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as UpdatePositionReq);
    }

    public bool Equals(UpdatePositionReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PosX != other.PosX) return false;
      if (Posy != other.Posy) return false;
      if (Posz != other.Posz) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (PosX != 0F) hash ^= PosX.GetHashCode();
      if (Posy != 0F) hash ^= Posy.GetHashCode();
      if (Posz != 0F) hash ^= Posz.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PosX != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(PosX);
      }
      if (Posy != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Posy);
      }
      if (Posz != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Posz);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (Posy != 0F) {
        size += 1 + 4;
      }
      if (Posz != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(UpdatePositionReq other) {
      if (other == null) {
        return;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.Posy != 0F) {
        Posy = other.Posy;
      }
      if (other.Posz != 0F) {
        Posz = other.Posz;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            PosX = input.ReadFloat();
            break;
          }
          case 21: {
            Posy = input.ReadFloat();
            break;
          }
          case 29: {
            Posz = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// login -> all Client 209
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BroadCastPostion : pb::IMessage<BroadCastPostion> {
    private static readonly pb::MessageParser<BroadCastPostion> _parser = new pb::MessageParser<BroadCastPostion>(() => new BroadCastPostion());
    public static pb::MessageParser<BroadCastPostion> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamedef.LoginReflection.Descriptor.MessageTypes[9]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public BroadCastPostion() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BroadCastPostion(BroadCastPostion other) : this() {
      roleID_ = other.roleID_;
      posX_ = other.posX_;
      posy_ = other.posy_;
      posz_ = other.posz_;
    }

    public BroadCastPostion Clone() {
      return new BroadCastPostion(this);
    }

    /// <summary>Field number for the "RoleID" field.</summary>
    public const int RoleIDFieldNumber = 1;
    private uint roleID_;
    public uint RoleID {
      get { return roleID_; }
      set {
        roleID_ = value;
      }
    }

    /// <summary>Field number for the "PosX" field.</summary>
    public const int PosXFieldNumber = 2;
    private float posX_;
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "Posy" field.</summary>
    public const int PosyFieldNumber = 3;
    private float posy_;
    public float Posy {
      get { return posy_; }
      set {
        posy_ = value;
      }
    }

    /// <summary>Field number for the "Posz" field.</summary>
    public const int PoszFieldNumber = 4;
    private float posz_;
    public float Posz {
      get { return posz_; }
      set {
        posz_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as BroadCastPostion);
    }

    public bool Equals(BroadCastPostion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleID != other.RoleID) return false;
      if (PosX != other.PosX) return false;
      if (Posy != other.Posy) return false;
      if (Posz != other.Posz) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (RoleID != 0) hash ^= RoleID.GetHashCode();
      if (PosX != 0F) hash ^= PosX.GetHashCode();
      if (Posy != 0F) hash ^= Posy.GetHashCode();
      if (Posz != 0F) hash ^= Posz.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RoleID);
      }
      if (PosX != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PosX);
      }
      if (Posy != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Posy);
      }
      if (Posz != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Posz);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RoleID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoleID);
      }
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (Posy != 0F) {
        size += 1 + 4;
      }
      if (Posz != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(BroadCastPostion other) {
      if (other == null) {
        return;
      }
      if (other.RoleID != 0) {
        RoleID = other.RoleID;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.Posy != 0F) {
        Posy = other.Posy;
      }
      if (other.Posz != 0F) {
        Posz = other.Posz;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleID = input.ReadUInt32();
            break;
          }
          case 21: {
            PosX = input.ReadFloat();
            break;
          }
          case 29: {
            Posy = input.ReadFloat();
            break;
          }
          case 37: {
            Posz = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// login -> all Client 210
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BroadCastPlayerOnLine : pb::IMessage<BroadCastPlayerOnLine> {
    private static readonly pb::MessageParser<BroadCastPlayerOnLine> _parser = new pb::MessageParser<BroadCastPlayerOnLine>(() => new BroadCastPlayerOnLine());
    public static pb::MessageParser<BroadCastPlayerOnLine> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamedef.LoginReflection.Descriptor.MessageTypes[10]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public BroadCastPlayerOnLine() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BroadCastPlayerOnLine(BroadCastPlayerOnLine other) : this() {
      roleID_ = other.roleID_;
      accountName_ = other.accountName_;
    }

    public BroadCastPlayerOnLine Clone() {
      return new BroadCastPlayerOnLine(this);
    }

    /// <summary>Field number for the "RoleID" field.</summary>
    public const int RoleIDFieldNumber = 1;
    private uint roleID_;
    public uint RoleID {
      get { return roleID_; }
      set {
        roleID_ = value;
      }
    }

    /// <summary>Field number for the "AccountName" field.</summary>
    public const int AccountNameFieldNumber = 2;
    private string accountName_ = "";
    public string AccountName {
      get { return accountName_; }
      set {
        accountName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as BroadCastPlayerOnLine);
    }

    public bool Equals(BroadCastPlayerOnLine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleID != other.RoleID) return false;
      if (AccountName != other.AccountName) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (RoleID != 0) hash ^= RoleID.GetHashCode();
      if (AccountName.Length != 0) hash ^= AccountName.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RoleID);
      }
      if (AccountName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AccountName);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RoleID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoleID);
      }
      if (AccountName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountName);
      }
      return size;
    }

    public void MergeFrom(BroadCastPlayerOnLine other) {
      if (other == null) {
        return;
      }
      if (other.RoleID != 0) {
        RoleID = other.RoleID;
      }
      if (other.AccountName.Length != 0) {
        AccountName = other.AccountName;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleID = input.ReadUInt32();
            break;
          }
          case 18: {
            AccountName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// login -> all Client 211
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BroadCastPlayerOffLine : pb::IMessage<BroadCastPlayerOffLine> {
    private static readonly pb::MessageParser<BroadCastPlayerOffLine> _parser = new pb::MessageParser<BroadCastPlayerOffLine>(() => new BroadCastPlayerOffLine());
    public static pb::MessageParser<BroadCastPlayerOffLine> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamedef.LoginReflection.Descriptor.MessageTypes[11]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public BroadCastPlayerOffLine() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BroadCastPlayerOffLine(BroadCastPlayerOffLine other) : this() {
      roleID_ = other.roleID_;
    }

    public BroadCastPlayerOffLine Clone() {
      return new BroadCastPlayerOffLine(this);
    }

    /// <summary>Field number for the "RoleID" field.</summary>
    public const int RoleIDFieldNumber = 1;
    private uint roleID_;
    public uint RoleID {
      get { return roleID_; }
      set {
        roleID_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as BroadCastPlayerOffLine);
    }

    public bool Equals(BroadCastPlayerOffLine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleID != other.RoleID) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (RoleID != 0) hash ^= RoleID.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RoleID);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RoleID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoleID);
      }
      return size;
    }

    public void MergeFrom(BroadCastPlayerOffLine other) {
      if (other == null) {
        return;
      }
      if (other.RoleID != 0) {
        RoleID = other.RoleID;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// client -> login 212
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TestPingReq : pb::IMessage<TestPingReq> {
    private static readonly pb::MessageParser<TestPingReq> _parser = new pb::MessageParser<TestPingReq>(() => new TestPingReq());
    public static pb::MessageParser<TestPingReq> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamedef.LoginReflection.Descriptor.MessageTypes[12]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public TestPingReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    public TestPingReq(TestPingReq other) : this() {
    }

    public TestPingReq Clone() {
      return new TestPingReq(this);
    }

    public override bool Equals(object other) {
      return Equals(other as TestPingReq);
    }

    public bool Equals(TestPingReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(TestPingReq other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// login -> client 213
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TestPingAck : pb::IMessage<TestPingAck> {
    private static readonly pb::MessageParser<TestPingAck> _parser = new pb::MessageParser<TestPingAck>(() => new TestPingAck());
    public static pb::MessageParser<TestPingAck> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamedef.LoginReflection.Descriptor.MessageTypes[13]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public TestPingAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    public TestPingAck(TestPingAck other) : this() {
    }

    public TestPingAck Clone() {
      return new TestPingAck(this);
    }

    public override bool Equals(object other) {
      return Equals(other as TestPingAck);
    }

    public bool Equals(TestPingAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(TestPingAck other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// Client -> Login 214
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SendChatReq : pb::IMessage<SendChatReq> {
    private static readonly pb::MessageParser<SendChatReq> _parser = new pb::MessageParser<SendChatReq>(() => new SendChatReq());
    public static pb::MessageParser<SendChatReq> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamedef.LoginReflection.Descriptor.MessageTypes[14]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SendChatReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SendChatReq(SendChatReq other) : this() {
      content_ = other.content_;
    }

    public SendChatReq Clone() {
      return new SendChatReq(this);
    }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 1;
    private string content_ = "";
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SendChatReq);
    }

    public bool Equals(SendChatReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Content != other.Content) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Content.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Content);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      return size;
    }

    public void MergeFrom(SendChatReq other) {
      if (other == null) {
        return;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Content = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// login -> all client 215
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BroadCastWorldChat : pb::IMessage<BroadCastWorldChat> {
    private static readonly pb::MessageParser<BroadCastWorldChat> _parser = new pb::MessageParser<BroadCastWorldChat>(() => new BroadCastWorldChat());
    public static pb::MessageParser<BroadCastWorldChat> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamedef.LoginReflection.Descriptor.MessageTypes[15]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public BroadCastWorldChat() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BroadCastWorldChat(BroadCastWorldChat other) : this() {
      name_ = other.name_;
      content_ = other.content_;
    }

    public BroadCastWorldChat Clone() {
      return new BroadCastWorldChat(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 2;
    private string content_ = "";
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as BroadCastWorldChat);
    }

    public bool Equals(BroadCastWorldChat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Content != other.Content) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Content);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      return size;
    }

    public void MergeFrom(BroadCastWorldChat other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Content = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  client -> router 103
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class HeartBeatREQ : pb::IMessage<HeartBeatREQ> {
    private static readonly pb::MessageParser<HeartBeatREQ> _parser = new pb::MessageParser<HeartBeatREQ>(() => new HeartBeatREQ());
    public static pb::MessageParser<HeartBeatREQ> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamedef.LoginReflection.Descriptor.MessageTypes[16]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public HeartBeatREQ() {
      OnConstruction();
    }

    partial void OnConstruction();

    public HeartBeatREQ(HeartBeatREQ other) : this() {
    }

    public HeartBeatREQ Clone() {
      return new HeartBeatREQ(this);
    }

    public override bool Equals(object other) {
      return Equals(other as HeartBeatREQ);
    }

    public bool Equals(HeartBeatREQ other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(HeartBeatREQ other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// router -> client 104
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class HeartBeatACK : pb::IMessage<HeartBeatACK> {
    private static readonly pb::MessageParser<HeartBeatACK> _parser = new pb::MessageParser<HeartBeatACK>(() => new HeartBeatACK());
    public static pb::MessageParser<HeartBeatACK> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamedef.LoginReflection.Descriptor.MessageTypes[17]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public HeartBeatACK() {
      OnConstruction();
    }

    partial void OnConstruction();

    public HeartBeatACK(HeartBeatACK other) : this() {
    }

    public HeartBeatACK Clone() {
      return new HeartBeatACK(this);
    }

    public override bool Equals(object other) {
      return Equals(other as HeartBeatACK);
    }

    public bool Equals(HeartBeatACK other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(HeartBeatACK other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///  105
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TestPackage : pb::IMessage<TestPackage> {
    private static readonly pb::MessageParser<TestPackage> _parser = new pb::MessageParser<TestPackage>(() => new TestPackage());
    public static pb::MessageParser<TestPackage> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamedef.LoginReflection.Descriptor.MessageTypes[18]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public TestPackage() {
      OnConstruction();
    }

    partial void OnConstruction();

    public TestPackage(TestPackage other) : this() {
      changeClothes_ = other.changeClothes_.Clone();
    }

    public TestPackage Clone() {
      return new TestPackage(this);
    }

    /// <summary>Field number for the "changeClothes" field.</summary>
    public const int ChangeClothesFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_changeClothes_codec
        = pb::FieldCodec.ForInt32(8);
    private readonly pbc::RepeatedField<int> changeClothes_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> ChangeClothes {
      get { return changeClothes_; }
    }

    public override bool Equals(object other) {
      return Equals(other as TestPackage);
    }

    public bool Equals(TestPackage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!changeClothes_.Equals(other.changeClothes_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= changeClothes_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      changeClothes_.WriteTo(output, _repeated_changeClothes_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += changeClothes_.CalculateSize(_repeated_changeClothes_codec);
      return size;
    }

    public void MergeFrom(TestPackage other) {
      if (other == null) {
        return;
      }
      changeClothes_.Add(other.changeClothes_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            changeClothes_.AddEntriesFrom(input, _repeated_changeClothes_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PeerConnected : pb::IMessage<PeerConnected> {
    private static readonly pb::MessageParser<PeerConnected> _parser = new pb::MessageParser<PeerConnected>(() => new PeerConnected());
    public static pb::MessageParser<PeerConnected> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamedef.LoginReflection.Descriptor.MessageTypes[19]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PeerConnected() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PeerConnected(PeerConnected other) : this() {
    }

    public PeerConnected Clone() {
      return new PeerConnected(this);
    }

    public override bool Equals(object other) {
      return Equals(other as PeerConnected);
    }

    public bool Equals(PeerConnected other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(PeerConnected other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PeerDisconnected : pb::IMessage<PeerDisconnected> {
    private static readonly pb::MessageParser<PeerDisconnected> _parser = new pb::MessageParser<PeerDisconnected>(() => new PeerDisconnected());
    public static pb::MessageParser<PeerDisconnected> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamedef.LoginReflection.Descriptor.MessageTypes[20]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PeerDisconnected() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PeerDisconnected(PeerDisconnected other) : this() {
    }

    public PeerDisconnected Clone() {
      return new PeerDisconnected(this);
    }

    public override bool Equals(object other) {
      return Equals(other as PeerDisconnected);
    }

    public bool Equals(PeerDisconnected other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(PeerDisconnected other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PeerConnectError : pb::IMessage<PeerConnectError> {
    private static readonly pb::MessageParser<PeerConnectError> _parser = new pb::MessageParser<PeerConnectError>(() => new PeerConnectError());
    public static pb::MessageParser<PeerConnectError> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamedef.LoginReflection.Descriptor.MessageTypes[21]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PeerConnectError() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PeerConnectError(PeerConnectError other) : this() {
    }

    public PeerConnectError Clone() {
      return new PeerConnectError(this);
    }

    public override bool Equals(object other) {
      return Equals(other as PeerConnectError);
    }

    public bool Equals(PeerConnectError other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(PeerConnectError other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PeerSendError : pb::IMessage<PeerSendError> {
    private static readonly pb::MessageParser<PeerSendError> _parser = new pb::MessageParser<PeerSendError>(() => new PeerSendError());
    public static pb::MessageParser<PeerSendError> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamedef.LoginReflection.Descriptor.MessageTypes[22]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PeerSendError() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PeerSendError(PeerSendError other) : this() {
    }

    public PeerSendError Clone() {
      return new PeerSendError(this);
    }

    public override bool Equals(object other) {
      return Equals(other as PeerSendError);
    }

    public bool Equals(PeerSendError other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(PeerSendError other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PeerRecvError : pb::IMessage<PeerRecvError> {
    private static readonly pb::MessageParser<PeerRecvError> _parser = new pb::MessageParser<PeerRecvError>(() => new PeerRecvError());
    public static pb::MessageParser<PeerRecvError> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamedef.LoginReflection.Descriptor.MessageTypes[23]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PeerRecvError() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PeerRecvError(PeerRecvError other) : this() {
    }

    public PeerRecvError Clone() {
      return new PeerRecvError(this);
    }

    public override bool Equals(object other) {
      return Equals(other as PeerRecvError);
    }

    public bool Equals(PeerRecvError other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(PeerRecvError other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
