// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BagItem.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Gamedef {

  /// <summary>Holder for reflection information generated from BagItem.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class BagItemReflection {

    #region Descriptor
    /// <summary>File descriptor for BagItem.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BagItemReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1CYWdJdGVtLnByb3RvEgdnYW1lZGVmIh8KDUJ1eUJhZ0l0ZW1SZXESDgoG",
            "SXRlbUlEGAEgASgFImEKDUJ1eUJhZ0l0ZW1BY2sSDgoGUmVzdWx0GAEgASgJ",
            "Eg4KBkl0ZW1JRBgCIAEoBRINCgVDb3VudBgDIAEoBRINCgVQcmljZRgEIAEo",
            "BRISCgpHb2xkTnVtYmVyGAUgASgFIkYKDEJhZ19JdGVtSW5mbxINCgVDb3Vu",
            "dBgBIAEoBRIQCghtYXhDb3VudBgCIAEoBRIVCglQcmljZUxpc3QYAyADKAVC",
            "AhAAIh8KDVVzZUJhZ0l0ZW1SZXESDgoGSXRlbUlEGAEgASgFIk0KDVVzZUJh",
            "Z0l0ZW1BY2sSDgoGUmVzdWx0GAEgASgJEg4KBkl0ZW1JRBgCIAEoBRINCgVD",
            "b3VudBgDIAEoBRINCgVQcmljZRgEIAEoBSI/ChBVcGRhdGVCYWdJdGVtQWNr",
            "EisKCEl0ZW1MaXN0GAEgAygLMhUuZ2FtZWRlZi5CYWdfSXRlbUluZm9CAhAA",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamedef.BuyBagItemReq), global::Gamedef.BuyBagItemReq.Parser, new[]{ "ItemID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamedef.BuyBagItemAck), global::Gamedef.BuyBagItemAck.Parser, new[]{ "Result", "ItemID", "Count", "Price", "GoldNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamedef.Bag_ItemInfo), global::Gamedef.Bag_ItemInfo.Parser, new[]{ "Count", "MaxCount", "PriceList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamedef.UseBagItemReq), global::Gamedef.UseBagItemReq.Parser, new[]{ "ItemID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamedef.UseBagItemAck), global::Gamedef.UseBagItemAck.Parser, new[]{ "Result", "ItemID", "Count", "Price" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamedef.UpdateBagItemAck), global::Gamedef.UpdateBagItemAck.Parser, new[]{ "ItemList" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// client -> login 250
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BuyBagItemReq : pb::IMessage<BuyBagItemReq> {
    private static readonly pb::MessageParser<BuyBagItemReq> _parser = new pb::MessageParser<BuyBagItemReq>(() => new BuyBagItemReq());
    public static pb::MessageParser<BuyBagItemReq> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamedef.BagItemReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public BuyBagItemReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BuyBagItemReq(BuyBagItemReq other) : this() {
      itemID_ = other.itemID_;
    }

    public BuyBagItemReq Clone() {
      return new BuyBagItemReq(this);
    }

    /// <summary>Field number for the "ItemID" field.</summary>
    public const int ItemIDFieldNumber = 1;
    private int itemID_;
    public int ItemID {
      get { return itemID_; }
      set {
        itemID_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as BuyBagItemReq);
    }

    public bool Equals(BuyBagItemReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemID != other.ItemID) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ItemID != 0) hash ^= ItemID.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemID);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ItemID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemID);
      }
      return size;
    }

    public void MergeFrom(BuyBagItemReq other) {
      if (other == null) {
        return;
      }
      if (other.ItemID != 0) {
        ItemID = other.ItemID;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// login -> client 251
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BuyBagItemAck : pb::IMessage<BuyBagItemAck> {
    private static readonly pb::MessageParser<BuyBagItemAck> _parser = new pb::MessageParser<BuyBagItemAck>(() => new BuyBagItemAck());
    public static pb::MessageParser<BuyBagItemAck> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamedef.BagItemReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public BuyBagItemAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BuyBagItemAck(BuyBagItemAck other) : this() {
      result_ = other.result_;
      itemID_ = other.itemID_;
      count_ = other.count_;
      price_ = other.price_;
      goldNumber_ = other.goldNumber_;
    }

    public BuyBagItemAck Clone() {
      return new BuyBagItemAck(this);
    }

    /// <summary>Field number for the "Result" field.</summary>
    public const int ResultFieldNumber = 1;
    private string result_ = "";
    public string Result {
      get { return result_; }
      set {
        result_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ItemID" field.</summary>
    public const int ItemIDFieldNumber = 2;
    private int itemID_;
    public int ItemID {
      get { return itemID_; }
      set {
        itemID_ = value;
      }
    }

    /// <summary>Field number for the "Count" field.</summary>
    public const int CountFieldNumber = 3;
    private int count_;
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 4;
    private int price_;
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "GoldNumber" field.</summary>
    public const int GoldNumberFieldNumber = 5;
    private int goldNumber_;
    public int GoldNumber {
      get { return goldNumber_; }
      set {
        goldNumber_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as BuyBagItemAck);
    }

    public bool Equals(BuyBagItemAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (ItemID != other.ItemID) return false;
      if (Count != other.Count) return false;
      if (Price != other.Price) return false;
      if (GoldNumber != other.GoldNumber) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Result.Length != 0) hash ^= Result.GetHashCode();
      if (ItemID != 0) hash ^= ItemID.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      if (GoldNumber != 0) hash ^= GoldNumber.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Result.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Result);
      }
      if (ItemID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemID);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Count);
      }
      if (Price != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Price);
      }
      if (GoldNumber != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(GoldNumber);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Result.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Result);
      }
      if (ItemID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemID);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (GoldNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoldNumber);
      }
      return size;
    }

    public void MergeFrom(BuyBagItemAck other) {
      if (other == null) {
        return;
      }
      if (other.Result.Length != 0) {
        Result = other.Result;
      }
      if (other.ItemID != 0) {
        ItemID = other.ItemID;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
      if (other.GoldNumber != 0) {
        GoldNumber = other.GoldNumber;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Result = input.ReadString();
            break;
          }
          case 16: {
            ItemID = input.ReadInt32();
            break;
          }
          case 24: {
            Count = input.ReadInt32();
            break;
          }
          case 32: {
            Price = input.ReadInt32();
            break;
          }
          case 40: {
            GoldNumber = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Bag_ItemInfo : pb::IMessage<Bag_ItemInfo> {
    private static readonly pb::MessageParser<Bag_ItemInfo> _parser = new pb::MessageParser<Bag_ItemInfo>(() => new Bag_ItemInfo());
    public static pb::MessageParser<Bag_ItemInfo> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamedef.BagItemReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Bag_ItemInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Bag_ItemInfo(Bag_ItemInfo other) : this() {
      count_ = other.count_;
      maxCount_ = other.maxCount_;
      priceList_ = other.priceList_.Clone();
    }

    public Bag_ItemInfo Clone() {
      return new Bag_ItemInfo(this);
    }

    /// <summary>Field number for the "Count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "maxCount" field.</summary>
    public const int MaxCountFieldNumber = 2;
    private int maxCount_;
    public int MaxCount {
      get { return maxCount_; }
      set {
        maxCount_ = value;
      }
    }

    /// <summary>Field number for the "PriceList" field.</summary>
    public const int PriceListFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_priceList_codec
        = pb::FieldCodec.ForInt32(24);
    private readonly pbc::RepeatedField<int> priceList_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> PriceList {
      get { return priceList_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Bag_ItemInfo);
    }

    public bool Equals(Bag_ItemInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      if (MaxCount != other.MaxCount) return false;
      if(!priceList_.Equals(other.priceList_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      if (MaxCount != 0) hash ^= MaxCount.GetHashCode();
      hash ^= priceList_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
      if (MaxCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxCount);
      }
      priceList_.WriteTo(output, _repeated_priceList_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (MaxCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxCount);
      }
      size += priceList_.CalculateSize(_repeated_priceList_codec);
      return size;
    }

    public void MergeFrom(Bag_ItemInfo other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.MaxCount != 0) {
        MaxCount = other.MaxCount;
      }
      priceList_.Add(other.priceList_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
          case 16: {
            MaxCount = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            priceList_.AddEntriesFrom(input, _repeated_priceList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// client -> login 252
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UseBagItemReq : pb::IMessage<UseBagItemReq> {
    private static readonly pb::MessageParser<UseBagItemReq> _parser = new pb::MessageParser<UseBagItemReq>(() => new UseBagItemReq());
    public static pb::MessageParser<UseBagItemReq> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamedef.BagItemReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public UseBagItemReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    public UseBagItemReq(UseBagItemReq other) : this() {
      itemID_ = other.itemID_;
    }

    public UseBagItemReq Clone() {
      return new UseBagItemReq(this);
    }

    /// <summary>Field number for the "ItemID" field.</summary>
    public const int ItemIDFieldNumber = 1;
    private int itemID_;
    public int ItemID {
      get { return itemID_; }
      set {
        itemID_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as UseBagItemReq);
    }

    public bool Equals(UseBagItemReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemID != other.ItemID) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ItemID != 0) hash ^= ItemID.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemID);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ItemID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemID);
      }
      return size;
    }

    public void MergeFrom(UseBagItemReq other) {
      if (other == null) {
        return;
      }
      if (other.ItemID != 0) {
        ItemID = other.ItemID;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// login -> client 253
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UseBagItemAck : pb::IMessage<UseBagItemAck> {
    private static readonly pb::MessageParser<UseBagItemAck> _parser = new pb::MessageParser<UseBagItemAck>(() => new UseBagItemAck());
    public static pb::MessageParser<UseBagItemAck> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamedef.BagItemReflection.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public UseBagItemAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    public UseBagItemAck(UseBagItemAck other) : this() {
      result_ = other.result_;
      itemID_ = other.itemID_;
      count_ = other.count_;
      price_ = other.price_;
    }

    public UseBagItemAck Clone() {
      return new UseBagItemAck(this);
    }

    /// <summary>Field number for the "Result" field.</summary>
    public const int ResultFieldNumber = 1;
    private string result_ = "";
    public string Result {
      get { return result_; }
      set {
        result_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ItemID" field.</summary>
    public const int ItemIDFieldNumber = 2;
    private int itemID_;
    public int ItemID {
      get { return itemID_; }
      set {
        itemID_ = value;
      }
    }

    /// <summary>Field number for the "Count" field.</summary>
    public const int CountFieldNumber = 3;
    private int count_;
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 4;
    private int price_;
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as UseBagItemAck);
    }

    public bool Equals(UseBagItemAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (ItemID != other.ItemID) return false;
      if (Count != other.Count) return false;
      if (Price != other.Price) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Result.Length != 0) hash ^= Result.GetHashCode();
      if (ItemID != 0) hash ^= ItemID.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Result.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Result);
      }
      if (ItemID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemID);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Count);
      }
      if (Price != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Price);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Result.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Result);
      }
      if (ItemID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemID);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      return size;
    }

    public void MergeFrom(UseBagItemAck other) {
      if (other == null) {
        return;
      }
      if (other.Result.Length != 0) {
        Result = other.Result;
      }
      if (other.ItemID != 0) {
        ItemID = other.ItemID;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Result = input.ReadString();
            break;
          }
          case 16: {
            ItemID = input.ReadInt32();
            break;
          }
          case 24: {
            Count = input.ReadInt32();
            break;
          }
          case 32: {
            Price = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// login -> client 254
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UpdateBagItemAck : pb::IMessage<UpdateBagItemAck> {
    private static readonly pb::MessageParser<UpdateBagItemAck> _parser = new pb::MessageParser<UpdateBagItemAck>(() => new UpdateBagItemAck());
    public static pb::MessageParser<UpdateBagItemAck> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamedef.BagItemReflection.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public UpdateBagItemAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    public UpdateBagItemAck(UpdateBagItemAck other) : this() {
      itemList_ = other.itemList_.Clone();
    }

    public UpdateBagItemAck Clone() {
      return new UpdateBagItemAck(this);
    }

    /// <summary>Field number for the "ItemList" field.</summary>
    public const int ItemListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Gamedef.Bag_ItemInfo> _repeated_itemList_codec
        = pb::FieldCodec.ForMessage(10, global::Gamedef.Bag_ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Gamedef.Bag_ItemInfo> itemList_ = new pbc::RepeatedField<global::Gamedef.Bag_ItemInfo>();
    public pbc::RepeatedField<global::Gamedef.Bag_ItemInfo> ItemList {
      get { return itemList_; }
    }

    public override bool Equals(object other) {
      return Equals(other as UpdateBagItemAck);
    }

    public bool Equals(UpdateBagItemAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!itemList_.Equals(other.itemList_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= itemList_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      itemList_.WriteTo(output, _repeated_itemList_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += itemList_.CalculateSize(_repeated_itemList_codec);
      return size;
    }

    public void MergeFrom(UpdateBagItemAck other) {
      if (other == null) {
        return;
      }
      itemList_.Add(other.itemList_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            itemList_.AddEntriesFrom(input, _repeated_itemList_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
